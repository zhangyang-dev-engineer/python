对象（object）
  什么是对象：
    对象时内存中专门用来存储数据的一块区域
    对象中可以存放各种数据（比如，数字，布尔值，代码）
    对象由三部分组成：
          1，对象的标识，对象的类型，对象的值
          
 面向对象（oop)
    python是一门面向对象的编程语言
    所谓面向对象的语言，简单理解就是语言中的所有操作都是通过对象来进行的
          
 类：（class)
    目前所学的对象都是python内置对象
    但是内置对象并不能满足所有的需求，所以我们在开发中经常需要自定义一些对象
  class MyClass():
      pass
  print(MyClass)
  使用MyClass创建一个对象
  mc=MyClass()  使用类来创建对象，就像调用一个函数一样   mc是Myclass是一个实例
    isinstance（mc,MyClass）用来检查是否是一个类的实例
 类也是一个对象
 类就是一个用来创建对象的对象
 类是type类型，定义类实际上就是定义type类型的对象
 
 使用类创建对象的流程：
      1，创建一个变量
      2,在内存中创建一个新对象
      3，__init__(self)方法执行
      4，将对象的id赋值给变量

      mc = MyClass()  mc就是通过MyClass创建的对象，mc是MyClass的实例
      mc_2=MyClass()  mc  mc_2都是MyClass的实例，他们都是一类对象
      isinstance()用来检查一个对象是否是一个类的实例

      现在我们通过MyClass这个类创建的对象都是一个空对象
      也就是对象中实际上什么都没有，相当于是一个空的盒子
      可以向对象中添加变量，对象中的变量称为属性
      语法：对象.属性名= 属性值
类的定义：
    类和对象都是对现实生活中的内容的和程序中的内容的抽象
    实际上所有的事物都是由两部分构成：
        1，数据（属性）
        2，行为（方法）
   Class Person:
      在类的代码块中，我们可以定义变量和函数
      在类中我们所定义的变量，将会称为所有的实例的公共属性，变量会称为该类实例的公共属性，所有该类实例都已通过对象.属性名的形式访问
                                                          函数会称为该类实例的公共方法，所有该类实例都可以通过对象.方法名（）的形式调用方法
                                                          
      使用类创建对象的时候，所有的参数都会床给init方法
      所有实例都可以访问这些变量
      在类中也可以定义函数，我们称之为方法
      这些方法可以通过改类的所有实例来访问
          第一个参数，就是调用方法的对象本身，如果p1调用，则第一个参数就是p1对象，一般我们就将这个参数名为self
          def say_hello(self) :
        print('hello')
    p1=Person()
    p1.say_hello()
   调用方法，对象.方法名（）
   方法调用和函数的区别
      如果是函数调用，则调用时传几个参数，就会由几个实参
      但是如果是方法调用，默认传递一个参数，所以方法中至少要定义一个形参
   
    类中定义的属性和方法都是公共的，任何该类实例都可以访问
    属性和方法的查找流程：
        当我们调用一个对象属性时，解析器会先在当前对象中寻找是否含有该属性
          如果有，则直接访问当前的对象的属性值，如果没有，则去当前的类对象中去寻找，如果有则返回类对象的属性值，如果没有则报错
    类对象和实例对象都可以保存属性（方法）
        如果这个属性（方法）是所有的实例共享的，则应该将其保存到类对象
        如果这个属性（方法），是某
    在类中可以定义一些特殊方法（魔术方法）
    特殊方法都是以__开头，__结尾的方法   特殊方法不需要我们自己调用，不要尝试去调用特殊方法，特殊方法将会在特殊的时刻自动调用
      学习特殊方法：
        1，特殊方法什么时候调用
        2，特殊方法有什么用
    
   类的基本结构：
      class 类名（[父类]):
          公共的属性。。
          对象的初始化方法
          其它方法
        
   封装：面向对象的三大特性之一
      封装指的是对象中一些不希望被外部访问到的属性或方法
      可以为对象的属性使用双下划线开头__xxx
      双下划线开头的属性，是对象的隐藏属性，隐藏属性只能在类的内部访问，无法通过对象访问
      其实隐藏属性只不过是python自动为属性改了一个名字，实际上将名字修改为了，_类名_属性名  比如__name->_Person_name
      使用__开头的属性，实际上依然可以在外部访问，所以这种方式一般不用，一般我们会将一些私有属性（不希望被外部访问的属性），所以这种方式一般不用
          一般情况下，使用_开头的属性都是私有属性，没有特殊需要不要修改私有属性
        
         property装饰器，用来将一个get方法，转换为对象的属性
           添加为property装饰器以后，我们就可以像调用属性一样使用get方法
           使用property装饰方法，必须和属性名一样的
        setter方法的装饰器，@属性名.setter
        
   继承：继承是面向对象三大特性之一
          通过继承我们可以使一个类获取到其它类中的属性和方法
          在定义类时，可以在类名后的括号中指定当前类的父类（超类，基类，super)
              子类（衍生类）可以直接继承父类中所有的属性和方法
         通过继承可以直接让子类获取到父类的方法或属性，避免编写重复的代码，也符合ocp原则，所以我们经常需要同故宫继承来对一个类进行扩展     
      在创建类时，如果省略了父类，则默认父类为object
      object是所有类的父类，所有类都继承object
      issubclass()方法检查一个类是否是另一个类的子类
      
      如果在子类中如果有和父类同名的方法，则通过子类实例去调用方法时
        会调用子类的方法而不是父类的方法，这个特点称之为方法的重写（覆盖  ，override)
         当我们调用一个对象的方法时，会优先去当前对象中寻找是否具有该方法，如果有则直接调用，如果没有，则去当前对象的父类中寻找，如果父类中有
         则直接调用父类的方法，如果没有，则去父类的父类找，依次类推，直到找到object,如果依然没有找到，则报错
        
        
        
        
        
        
        
        
        
        
        
