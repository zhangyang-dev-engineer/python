列表（list)
  列表是python中的一个对象
  对象（object）就是内存中专门用来存储数据的一块区域
  之前我们学习的对象像数值，它能保存一个单一的数据
  
  My_list = [] 创建一个空列表，列表中存储的数据称为元素
  当向列y_表中添加元素时，用逗号隔开，列表中可以存任意类型，列表中的对象都会按照插入顺序来保存在列表中，第一个保存在第一个位置，第二个保存在第二个位置
    索引可以可以获取元素，索引从零开始,len(list)获取长度时索引+1
    my_list[0]获取某位置的值
    切片：从现有的列表中获取一个子列表
    创建一个列表，一般创建列表时，变量的名字会使用复数
    列表的索引可以是负数则从后向前获取元素，-1表示倒数第一个，-2表示倒数第二个以此类推
    同过切片来获取指定的元素
        语法：列表【起始：结束】  左闭右开
        通过切片获取元素时，会包括起始位置的元素，不会包括结束位置的元素
        做切片操作时，总会返回一个新的列表，不会影响原来的列表
        起始位置和结束位置的索引可以省略不写 
        如果省略结束位置，则会一直截取到最后  print(stus[1:])
        如果省略起始位置，则会从第一个元素开始截取   print(stus[:3])
        如果起始位置和结束位置全部省略，则相当于创建了一个列表的副本 print([:])
    语法：列表【起始：结束：步长】
        步长表示，每次获取元素的间隔，默认值是1，不能是0，可以是负数，如果是负数，则会从列表的后部向前面取元素print[::-1]   print(0:5:3)  
   + 和*
    +可以将两个列表拼接为一个列表 my_list = []+[]
    *可以将列表重复指定的次数   my_lsit=[]*5
   in和not in
    in 用来检查指定元素是否存在于列表中 
       如果存在，则返回True,否则返回False
    not in  用来检查指定元素是否不在列表中     print('a' in my_list)
      如果不在，返回True,否则返回False
    len() 获取列表中元素的个数
    min()获取列表中的最小值    参数传列表
    max()获取列表中的最大值
    两个方法（method）,方法和函数基本都是一样，只不过方法必须通过对象.方法（）的形式调用
   xxx.index()  单参时获取列表中元素第一次出现时的索引 stu.index('沙和尚')
      xxx.index()多参时，第二个参数表示查找的起始位置，第三个参数，表示查找的结束位置 左闭右开 print(stu.index('沙和尚'，3，5))
   xxx.count()  print(stu.count('沙和尚'))统计指定元素在列表中数量
  序列： 序列时python中最基本的一种数据结构
         数据结构指定计算机中数据存储的方式
         序列用于保存一组有序的数据，所有的数据在序列当中都有一个唯一的位置（索引）并且序列中的数据会按照添加的顺序来分配索引
         序列的分裂：
            可变序列：(序列中元素可以改变）
                列表：list
             不可表序列：（序列中元素不能改变）
                  字符串str
                  元组 tuple
         修改列表中的元素(仅支持可变序列): 直接通过索引来修改元素  stu[0]=''   del stu[2]  删除索引为2的元素
                        通过切片来修改列表：使用新的元素替换旧的元素 在给切片进行赋值时，只能使用序列   字符串也是序列  stu[0:2]=['','']
                                        stu[0:0] = ['']向索引为0的位置插入元素，当设置了步长时，序列中元素的个数必须和切片中元素的个数一致 stu[::2]=['',''] 
                                       通过切片来删除元素  del stu[0:2]    del [::2]   stus[1:3] = []
                    要将改变字符串元素，可以将字符串转为可变序列   s = 'hello'   s = list(s)                      
           append() 向列表的最后添加一个元素
           insert() 参数1:要插入的位置，参数2：要插入的元素
           entend() 使用新的序列来扩展当前序列，需要一个序列作为参数，它会将该序列中的元素添加到当前列表中
           clear()清空序列
           pop()根据索引删除，并返回被删除元素，不写参数，则删除最后一个元素
           remove()删除指定值的元素，如果相同值得元素有多个，指挥删除第一个
           reverse() 用来反转列表
           sort()用来对列表中得元素进行排序，默认升序排序  要降序得话需要传参：reverse=True
   通过for循环来遍历列表
      语法： for 变量 in 序列：
                  代码块
             for循环会执行多次，序列中有几个元素就会执行几次，每执行一次就会将序列中得一个元素赋值给变量，所以我们可以通过变量，来获取列表中得元素
             EMS员工管理系统
            range() 时一个函数，可以用来生成一个自然数的序列  该函数需要三个参数1，起始位置（可以省略默认是0）2，结束位置3，步长（默认是1）
              通过range()可以创建一个执行指定次数的for循环,for()循环除了创建方式以外，其余的和while一样，包括else,包括break,continue,都可以在for
                  循环中使用，而且for循环使用也更加简单
              for i range(30):
                print(i)
         元组： tuple 元组是一个不可变序列，他的操作方式基本和列表是一致的，所以你在操作元组时，就把元组当成是一个不可变的列表就ok了，一般当
                我们希望数据不改变时，就是用元组，其余情况都是用列表
                使用()来创建元组my_tuple = ()，元组时不可变对象，不能尝试为元组的元素重新赋值，当元组不是空元组时，括号可以省略，如果元组不是空元组
                                              它里面至少要有一个 my_tuple= 10，     my_tuple= 10,20,30
               元组的解包（结构） 解包就是将元组当中每一个元素都赋值给一个变量       my_tuple = 10,20,30,40       a,b,c,d = my_tuple
                 交换a和b的值，这时我们就可以利用元组的解包  a,b = b,a
                 在对一个元组进行解包时，变量的数量必须和元组中的元素数量一致，也可以在变量前面添加一个*，这样变量将会获取元组中所有剩余的元素
                 不能同时出现两个或者以上的*变量
                    a,b,*c=my_tuple   print(a,b)  print('c=',c)
                                        
    可变对象：  每个对象中都保存了三个数据： 对象里面数据可被改变，
                  a[0]=10  (该对象） 这个操作是在通过变量取修改对象的值，这种操作不会改变变量所指向的对象，当我们去修改对象时，
                                    如果有其它变量也指向了改对象，则修改也会在其它的变量种体现
                  a=[4,5,6] （改变量）  这个操作是在给变量重新赋值，这种操作会改变变量所指向的对象，为一个变量重新赋值时，不会影响其它的变量
                  一般只有在为变量赋值时才是修改变量，其余都是修改对象      
                id()，type() value()
                -列表就是一个可变对象 a=[1,2,3]
          == != 比较的是对象的值是否相等
          is    is not 比较的是对象的id是否相等（比较两个对象是否是同一个对象）
           a=[1,2,3]    b=[1,2,3]
           print(a==b) a和b的值相等，使用==会返回True
           print(a is b) a 和 b 不是同一个对象，内存地址不同，使用is 会返回False
                                        
      字典：（dict):  类似Java中的json
          字典属于一种新的数据类型，称为映射（mapping）
          字典的作用和列表类似，都是用来存储对象的容器
          列表存储数据的性能很好，但是查询数据的性能很差
          在字典种每一个元素都有一个唯一的名字，通过这个唯一的名字可以快速的查找到指定的元素
          在查询元素时，字典的效率非常快
          在字典种可以保存多个对象，每个对象都会有一个唯一的名字
              这个唯一的名字，我们称之为键（key)，通过key可以快速的查询value
              这个对象，我们称其为值（value)
              所以字典，我们也称为键值对
              每个字典中都可以有多个键值对，而每一个键值对称其为一项（item）
        使用{} 来创建一个字典
        语法： {key:value,key:value,key:value}
              字典中的值可以是任意对象，字典的键可以是任意不可变对象（int,str,bool,tuple...)
                                        字典的键不可以重复，如果重复后面的替换前面的
                         a = {'name':'zhangy','age':18}               
              根据键获取值     a['name']                  如果使用了字典中不存在键，会报错        
        使用dict()函数来创建字典
              每个参数都是一个键值对，参数名就是键，参数名就是值，（这种方式创建的字典，key都是字符串）
             d = dict(name='孙悟空',age=18
         也可以将要给包含有双值子序列的序列转换为字典 
                双值序列，序列中只有两个值，[]（）''
                子序列，如果序列中的元素也是序列，那么我们就称这个元素为子序列
          d= dict([('name','孙悟空'),('age',18)])    
         len()获取字典中键值对的个数
         in 检查字典中是否包含指定的键
         not in 检查字典中是否不包含指定的键
         获取字典中的值，根据键来获取值  d['name]   获取不到会报错
              get(key[,default])该方法用来根据键来获取字典的值，
                      如果获取不到，返回None,也可以指定一个默认值，来作为第二个参数，这样获取不到值就会返回默认值
                      print(d.get('hello','默认值'))
                                        
         修改字典：
              d[key]=value  修改字典的key-value,如果key存在则覆盖，不存在就添加
              setdefaut(key[,default])可以用来向字典中添加key-value
                  如果key已经存在于字典中，则返回key的值，不会对字典做任何操作
                  如果key不存在，则向字典中添加这个key,并设置value
              update([other]) 将其它字典中的key-value添加到当前字典中，入宫有重复的key,则后面的会替换到当前的
         删除字典中的key-value
              del d['']
              popitem()  随机删除字典中的一个键值对，一般都会删除最后一个键值对，删除之后，他会将删除的key-value作为返回值返回，删除空字典会报错
                返回的是一个元组，元组中有两个元素，第一个元素是删除的key,第二个是删除的value
              pop(key[,default]) 根据key删除字典中的key-value  会将被删除的value返回，如果删除不存在的key,会报错，
                      如果指定了默认值，在删除不存在key时，不会报错，而是直接返回默认值
         clear()用来清空字典
         copy()该方法用于对字典进行浅复制，复制以后的对象和原对象是独立，修改一个不会影响另一个
              浅复制胡简单复制对象内部的值，如果值也是一个可变对象，这个可变对象不会被复制
         
         遍历字典：
            keys() 该方法会返回字典的所有的key
            该方法会返回一个序列，序列中保存有字典的所有的键
             通过遍历keys() 来获取所有的值  keys() values()
             for k in d.keys():
                    print(k,d[k])
           items() 该方法会返回字典中所有的项，它会返回一个序列，序列中包含有双值子序列 ，双值分别是，字典中key和value
           for k,v in d.items():
              print(k,'==',v)
          集合：（set)
                集合和列表非常相似
                  不同点：
                      1，集合中只能存储不可变对象
                      2.集合中存储的对象时无序（不是按照元素的插入顺序保存）
                      3，集合中不能出现重复的元素
                
                 创建集合：使用{}创建集合  s={1,2,3,5}
                 使用set()函数来创建集合   s = set()空集合
                 可以通过set()来将序列和字典转换为集合
                        s=set([1,2,3,5])    s = ('hello')   s = set({'a':1,'b':2,'c':3}) 使用set()将字典转换为集合时，只包含字典中的键
                使用in和not in来检查集合中的元素
                add()向集合中添加元素 s.add(10)
                update()将一个集合中的元素添加到当前集合中  可以传递序列或字典作为参数，字典只会使用键
                pop()随机删除一个集合中的元素
                remove()删除元素中的指定元素
                clear()清空集合
                copy()对集合浅复制
                
            在对集合做运算时，不会影响原来的集合，而是返回一个运算结果
                s={1,2,3,4,5}   s2={3,4,5,6,7}
                交集运算：交集s&s2         差集 s-s2   并集运算s|s2   异或集(获取只在一个集合中出现的元素) s^s2   
                          <=检查a集合是否是b集合的子集，如果a集合中的元素全部都在b集合中出现，那么a集合就是b集合的子集，b集合是a集合的超集
                          <检查一个集合是否是另一个集合的真子集，如果超集b中含有子集a中所有元素，并且b中还有a中没有的子集，则b就是a的真超集，a是b的真子集
                          >= 检查一个集合是否是另一个的超集
                          >检查一个集合是否是另一个的真超集
                                        
                                        
                                        
                                        
                                        
                                              
                        
